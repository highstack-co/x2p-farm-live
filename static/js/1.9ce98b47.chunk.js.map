{"version":3,"sources":["utils/formatBalance.ts","components/layout/Container.tsx","components/layout/Page.tsx","utils/callHelpers.ts","config/index.ts","components/UnlockButton.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","hooks/useStake.ts","components/layout/Flex.tsx","utils/getLiquidityUrlPathParts.ts","components/Tags.tsx","hooks/useApprove.ts","hooks/useUnstake.ts","utils/compoundApyHelpers.ts","views/Pools/components/Divider.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","Container","styled","div","theme","mediaQueries","sm","Page","lg","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","stakeV2","farmContract","index","stakeTokens","unstake","emergencyWithdraw","withdraw","unstakeV2","unstakeTokens","harvest","soushHarvest","sousChefContract","gas","soushHarvestBnb","value","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","CAKE_POOL_PID","BASE_EXCHANGE_URL","BASE_ADD_LIQUIDITY_URL","UnlockButton","props","TranslateString","useI18n","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","xs","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","addLiquidityUrl","inputTitle","isBalanceZero","parseFloat","style","position","justifyContent","pl","fontSize","toLocaleString","alignItems","placeholder","scale","mr","color","bold","href","external","useStake","dispatch","useDispatch","useWeb3React","useMasterchef","handleStake","useCallback","txHash","fetchFarmUserDataAsync","console","info","onStake","useStakeV2","farmAddress","web3","useWeb3","getFarmV2Contract","fetchFarmV2UserDataAsync","FlexLayout","getLiquidityUrlPathParts","quoteTokenAdresses","tokenAddresses","firstPart","process","secondPart","CoreTag","variant","outline","startIcon","CommunityTag","useApprove","onApprove","useUnstake","handleUnstake","onUnstake","useUnstakeV2","calculateCakeEarnedPerThousandDollars","number","numberOfDays","farmApy","principal","cakePrice","Math","round","apyModalRoi","amountEarned","amountInvested","textSubtle","mb","Wrapper","primary","ExpandableSectionButton","expanded","role","defaultProps"],"mappings":"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","file":"static/js/1.9ce98b47.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\n\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\r\n  return displayBalance.toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\r\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\r\n}\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 1200px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","import styled from 'styled-components'\r\nimport Container from './Container'\r\n\r\nconst Page = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default Page\r\n","import BigNumber from \"bignumber.js\";\r\nimport { ethers } from \"ethers\";\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account });\r\n};\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .deposit(\r\n        pid,\r\n        new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(),\r\n      )\r\n      .send({ from: account })\r\n      .on(\"transactionHash\", (tx) => {\r\n        return tx.transactionHash;\r\n      });\r\n  }\r\n  const decimals = pid === 3 ? 9 : 18\r\n\r\n  return masterChefContract.methods\r\n    .deposit(\r\n      pid,\r\n      new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString(),\r\n    )\r\n    .send({ from: account })\r\n    .on(\"transactionHash\", (tx) => {\r\n      return tx.transactionHash;\r\n    });\r\n};\r\n\r\nexport const stakeV2 = async (farmContract, index, amount, account) => {\r\n  const decimals = index === 3 ? 9 : 18;\r\n  return farmContract.methods\r\n    .stakeTokens(\r\n      new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString(),\r\n    )\r\n    .send({ from: account })\r\n    .on(\"transactionHash\", (tx) => {\r\n      return tx.transactionHash;\r\n    });\r\n};\r\n\r\n\r\nexport const sousStake = async (\r\n  sousChefContract,\r\n  amount,\r\n  decimals = 18,\r\n  account,\r\n) => {\r\n  return sousChefContract.methods\r\n    .deposit(\r\n      new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString(),\r\n    )\r\n    .send({ from: account })\r\n    .on(\"transactionHash\", (tx) => {\r\n      return tx.transactionHash;\r\n    });\r\n};\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({\r\n      from: account,\r\n      gas: 200000,\r\n      value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(),\r\n    })\r\n    .on(\"transactionHash\", (tx) => {\r\n      return tx.transactionHash;\r\n    });\r\n};\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  if (amount === '0'){\r\n    return masterChefContract.methods\r\n      .emergencyWithdraw(\r\n        pid,\r\n      )\r\n      .send({ from: account })\r\n      .on(\"transactionHash\", (tx) => {\r\n        return tx.transactionHash;\r\n      });\r\n  }\r\n  if (pid === 0) {\r\n    return masterChefContract.methods\r\n      .withdraw(\r\n        pid,\r\n        new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(),\r\n      )\r\n      .send({ from: account })\r\n      .on(\"transactionHash\", (tx) => {\r\n        return tx.transactionHash;\r\n      });\r\n  }\r\n\r\n  return masterChefContract.methods\r\n    .withdraw(\r\n      pid,\r\n      new BigNumber(amount)\r\n        .times(new BigNumber(10).pow(pid === 3 ? 9 : 18))\r\n        .toString(),\r\n    )\r\n    .send({ from: account })\r\n    .on(\"transactionHash\", (tx) => {\r\n      return tx.transactionHash;\r\n    });\r\n};\r\n\r\n\r\nexport const unstakeV2 = async (farmContract, index, amount, account) => {\r\n  return farmContract.methods\r\n    .unstakeTokens(\r\n      new BigNumber(amount)\r\n        .times(new BigNumber(10).pow(index === 3 ? 9 : 18))\r\n        .toString(), true\r\n    )\r\n    .send({ from: account })\r\n    .on(\"transactionHash\", (tx) => {\r\n      return tx.transactionHash;\r\n    });\r\n};\r\n\r\nexport const sousUnstake = async (\r\n  sousChefContract,\r\n  amount,\r\n  decimals = 18,\r\n  account,\r\n) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (\r\n    sousChefContract.options.address ===\r\n    \"0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC\"\r\n  ) {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on(\"transactionHash\", (tx) => {\r\n        return tx.transactionHash;\r\n      });\r\n  }\r\n  if (\r\n    sousChefContract.options.address ===\r\n    \"0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831\"\r\n  ) {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on(\"transactionHash\", (tx) => {\r\n        return tx.transactionHash;\r\n      });\r\n  }\r\n\r\n  return sousChefContract.methods\r\n    .withdraw(\r\n      new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString(),\r\n    )\r\n    .send({ from: account })\r\n    .on(\"transactionHash\", (tx) => {\r\n      return tx.transactionHash;\r\n    });\r\n};\r\n\r\nexport const sousEmegencyUnstake = async (\r\n  sousChefContract,\r\n  amount,\r\n  account,\r\n) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on(\"transactionHash\", (tx) => {\r\n      return tx.transactionHash;\r\n    });\r\n};\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, \"0\")\r\n    .send({ from: account })\r\n    .on(\"transactionHash\", (tx) => {\r\n      return tx.transactionHash;\r\n    });\r\n};\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit(\"0\")\r\n    .send({ from: account, gas: 200000 })\r\n    .on(\"transactionHash\", (tx) => {\r\n      return tx.transactionHash;\r\n    });\r\n};\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, gas: 200000, value: new BigNumber(0) })\r\n    .on(\"transactionHash\", (tx) => {\r\n      return tx.transactionHash;\r\n    });\r\n};\r\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\nexport const CAKE_POOL_PID = 1\nexport const BASE_URL = 'https://babyfarm.netlify.app'\nexport const BASE_EXCHANGE_URL = 'https://www.xenonswap.org'\nexport const BASE_ADD_LIQUIDITY_URL = `${BASE_EXCHANGE_URL}/#/add`\nexport const BASE_LIQUIDITY_POOL_URL = `${BASE_EXCHANGE_URL}/#/pool`\nexport const LOTTERY_MAX_NUMBER_OF_TICKETS = 50\nexport const LOTTERY_TICKET_PRICE = 1\n","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst UnlockButton = (props) => {\r\n  const TranslateString = useI18n()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props}>\r\n      {TranslateString(292, 'Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">\r\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\r\n          </Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {TranslateString(452, 'Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          No tokens to stake:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {TranslateString(999, 'get')} {symbol}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from \"bignumber.js\";\r\nimport { useCallback } from \"react\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport useWeb3 from \"hooks/useWeb3\";\r\nimport { fetchFarmUserDataAsync, fetchFarmV2UserDataAsync } from \"state/actions\";\r\nimport { stake, stakeV2 } from \"utils/callHelpers\";\r\nimport { getFarmV2Contract } from \"utils/contractHelpers\";\r\nimport { getAddress } from \"utils/addressHelpers\";\r\n\r\nimport { useMasterchef } from \"./useContract\";\r\n\r\nexport const useStake = (pid: number) => {\r\n  const dispatch = useDispatch();\r\n  const { account } = useWeb3React();\r\n  const masterChefContract = useMasterchef();\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account);\r\n      dispatch(fetchFarmUserDataAsync(account));\r\n      console.info(txHash);\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  );\r\n\r\n  return { onStake: handleStake };\r\n};\r\n\r\nexport const useStakeV2 = (farmAddress: string, index: number) => {\r\n  const dispatch = useDispatch();\r\n  const { account } = useWeb3React();\r\n  const web3 = useWeb3()\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const farmContract = getFarmV2Contract(farmAddress, web3);\r\n      const txHash = await stakeV2(farmContract, index, amount, account);\r\n      dispatch(fetchFarmV2UserDataAsync(account));\r\n      console.info(txHash);\r\n    },\r\n    [account, dispatch, farmAddress, index, web3],\r\n  );\r\n\r\n  return { onStake: handleStake };\r\n};\r\n\r\nexport default useStake;\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst CoreTag = (props) => (\r\n  <Tag variant=\"secondary\" style={{color:\"#fff\"}} outline startIcon={<VerifiedIcon />} {...props}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = (props) => (\r\n  <Tag variant=\"textSubtle\" outline startIcon={<CommunityIcon />} {...props}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = (props) => (\r\n  <Tag variant=\"binance\" outline startIcon={<BinanceIcon />} {...props}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nconst DualTag = (props) => (\r\n  <Tag variant=\"textSubtle\" outline {...props}>\r\n    Dual\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, DualTag }\r\n","import { useCallback } from \"react\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { Contract } from \"web3-eth-contract\";\r\nimport { ethers } from \"ethers\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateUserAllowance, fetchFarmUserDataAsync, fetchFarmV2UserDataAsync } from \"state/actions\";\r\nimport { approve } from \"utils/callHelpers\";\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from \"./useContract\";\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract, farmContract?: Contract) => {\r\n  const dispatch = useDispatch();\r\n  const { account } = useWeb3React();\r\n  const masterChefContract = useMasterchef();\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      let tx: any;\r\n      if (farmContract){\r\n        tx = (await approve(lpContract, farmContract, account));\r\n        dispatch(fetchFarmV2UserDataAsync(account));\r\n      } else {\r\n        tx = await approve(lpContract, masterChefContract, account);\r\n        dispatch(fetchFarmUserDataAsync(account));\r\n      }\r\n      return tx;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract, farmContract]);\r\n\r\n  return { onApprove: handleApprove };\r\n};\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch();\r\n  const { account } = useWeb3React();\r\n  const sousChefContract = useSousChef(sousId);\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account);\r\n      dispatch(updateUserAllowance(sousId, account));\r\n      return tx;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId]);\r\n\r\n  return { onApprove: handleApprove };\r\n};\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account } = useWeb3React();\r\n  const cakeContract = useCake();\r\n  const lotteryContract = useLottery();\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account);\r\n      return tx;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }, [account, cakeContract, lotteryContract]);\r\n\r\n  return { onApprove: handleApprove };\r\n};\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (\r\n  tokenContract: Contract,\r\n  spenderAddress: string,\r\n) => {\r\n  const { account } = useWeb3React();\r\n  const onApprove = useCallback(async () => {\r\n    const tx = await tokenContract.methods\r\n      .approve(spenderAddress, ethers.constants.MaxUint256)\r\n      .send({ from: account });\r\n    return tx;\r\n  }, [account, spenderAddress, tokenContract]);\r\n\r\n  return onApprove;\r\n};\r\n","import { useCallback } from \"react\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport useWeb3 from \"hooks/useWeb3\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  fetchFarmV2UserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from \"state/actions\";\r\nimport { unstake, unstakeV2 } from \"utils/callHelpers\";\r\nimport { getFarmV2Contract } from \"utils/contractHelpers\";\r\nimport { useMasterchef } from \"./useContract\";\r\n\r\nexport const useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch();\r\n  const { account } = useWeb3React();\r\n  const masterChefContract = useMasterchef();\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account);\r\n      dispatch(fetchFarmUserDataAsync(account));\r\n      console.info(txHash);\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  );\r\n\r\n  return { onUnstake: handleUnstake };\r\n};\r\n\r\nexport const useUnstakeV2 = (farmAddress: string, index: number) => {\r\n  const dispatch = useDispatch();\r\n  const { account } = useWeb3React();\r\n  const web3 = useWeb3()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      \r\n      const farmContract = getFarmV2Contract(farmAddress, web3);\r\n      const txHash = await unstakeV2(farmContract, index, amount, account);\r\n      dispatch(fetchFarmV2UserDataAsync(account));\r\n      console.info(txHash);\r\n    },\r\n    [account, dispatch, farmAddress, index, web3],\r\n  );\r\n\r\n  return { onUnstake: handleUnstake };\r\n};\r\n\r\n\r\nexport default useUnstake;\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  // const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n  \r\n  const finalAmount = principal * (1 + (apyAsDecimal * daysAsDecimalOfYear));\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div<{mb:boolean}>`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto ${({mb})=>mb?10:60}px;\r\n  width: 100%;\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n"],"sourceRoot":""}